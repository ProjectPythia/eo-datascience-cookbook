{"version":2,"kind":"Notebook","sha256":"1ba6c403d5e6f648a2c9b6831fa19c99b3783690b6d64d7bc26d881a0affaa8b","slug":"notebooks.courses.microwave-remote-sensing.unit-01.in-class-exercise","location":"/notebooks/courses/microwave-remote-sensing/unit_01/01_in_class_exercise.ipynb","dependencies":[],"frontmatter":{"title":"Discover and Read SAR Data","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Wolfgang Wagner","given":"Wolfgang","family":"Wagner"},"name":"Wolfgang Wagner","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Martin Schobben","given":"Martin","family":"Schobben"},"name":"Martin Schobben","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Nikolas Pikall","given":"Nikolas","family":"Pikall"},"name":"Nikolas Pikall","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Joseph Wagner","given":"Joseph","family":"Wagner"},"name":"Joseph Wagner","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Davide Festa","given":"Davide","family":"Festa"},"name":"Davide Festa","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Felix David Reuß","given":"Felix David","family":"Reuß"},"name":"Felix David Reuß","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Luka Jović","given":"Luka","family":"Jović"},"name":"Luka Jović","id":"contributors-myst-generated-uid-6"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":2}},"exports":[{"format":"ipynb","filename":"01_in_class_exercise.ipynb","url":"/eo-datascience-cookbook/build/01_in_class_exercise-0d53e73896450da1a66fad099496c9e1.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook demonstrates how to access radar data in a SpatioTemporal Asset Catalog (STAC) Catalogue using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qgQ1ued0xk"},{"type":"inlineCode","value":"pystac","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tr5YNgtWn2"},{"type":"text","value":" library. In this example, we use Sentinel-1 data from the EODC (earth observation data and high performance computing service provider based in Vienna) STAC catalog. In the further process, we will learn how to query a STAC catalog, select specific items, and display the metadata and the actual image.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Q9JhBVvOD4"}],"key":"yxCsc0PtN9"}],"key":"VlNzuDlFXo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import folium\nimport pystac_client\nfrom odc import stac as odc_stac","key":"FXksWsx09P"},{"type":"output","id":"Y0TowEigCReiISKvzimXB","data":[],"key":"I9DUW8LDQI"}],"key":"Axqqk6vDRH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data Discovery","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W9QQYLmgQA"}],"identifier":"data-discovery","label":"Data Discovery","html_id":"data-discovery","implicit":true,"key":"q3fRTvDM7t"}],"key":"XAUpX52B6I"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"eodc_catalog = pystac_client.Client.open(\"https://stac.eodc.eu/api/v1\")\n\neodc_catalog","key":"VXjndzvfAQ"},{"type":"output","id":"OHN4E9_h0QUjsPLqNsit2","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"<Client id=stac-fastapi>","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"cfe74d50c8827055d27dc4f7e00ea24a","path":"/eo-datascience-cookbook/build/cfe74d50c8827055d27dc4f7e00ea24a.html"}}}],"key":"uvxKCCHAR8"}],"key":"tVX2d4hZNE"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The URL ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LlL2Q3PmN3"},{"type":"inlineCode","value":"https://stac.eodc.eu/api/v1","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fCm6iXGjXZ"},{"type":"text","value":", served over Hypertext Transfer Protocol (HTTP), is a STAC-compliant API endpoint (specific URL address where an API service is available) that leads to the EODC Catalogue. Besides EODC’s, other catalogues can be found on ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BHl91XVZm9"},{"type":"link","url":"https://stacindex.org/catalogs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"STAC Index","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pdqG9SUWJK"}],"urlSource":"https://stacindex.org/catalogs","key":"apglaTIEM4"},{"type":"text","value":", such as United States Geological Survey (USGS) Landsat imagery, Sentinel Hub, Copernicus Data Space Ecosystem, and so on. Briefly spoken, STAC can be used to search, discover, and access metadata of these datasets with the same code. The EODC Catalogue can be accessed on the web via this ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ilzbKkpOgb"},{"type":"link","url":"https://services.eodc.eu/browser/#/?.language=en","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"link","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AWjXnQ49j2"}],"urlSource":"https://services.eodc.eu/browser/#/?.language=en","key":"iN2Vd482jV"},{"type":"text","value":" as well.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gNW8OMAy4v"}],"key":"WFqKbjsxG8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Each STAC catalog, composed by different providers, has many collections. To get all collections of a catalog, we can print all of them and their ids, which are used to fetch them from the catalog.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oDxUQxCfLm"}],"key":"B1oygfaqVk"}],"key":"RZW71GyWOg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"collections = eodc_catalog.get_collections()\n\n# length of string of collection.id, for pretty print\nmax_length = max(len(collection.id) for collection in collections)\n\nfor collection in eodc_catalog.get_collections():\n    print(f\"{collection.id.ljust(max_length)}: {collection.title}\")","key":"PhRx3tlx2A"},{"type":"output","id":"PC3MWntmj8lXko3Za2h2B","data":[{"output_type":"stream","name":"stdout","text":"AI4SAR_SIG0                      : AI4SAR Despeckled Sentinel-1 Sigma0 (20m)\nASA_IMP_1P                       : Envisat ASAR Image Mode Precision Level-1\nASA_IMS_1P                       : Envisat ASAR Image Mode Single Look Complex Level-1\nAUSTRIA_GROUND_MOTION            : Austria Ground Motion\nAUT_DEM                          : Austrian High Resolution DEM\nBOA_LANDSAT_8                    : Bottom of Atmosphere Landsat-8 at 30m resolution.\nBOA_SENTINEL_2                   : Bottom of Atmosphere Sentinel-2 at 10m resolution.\nCGLS_SSM_1KM                     : Copernicus Global Land Surface Soil Moisture\nCOP_DEM                          : Copernicus Digital Elevation Model (DEM)\nCORINE_LAND_COVER                : Corine Land Cover\nDOP_AUT_K_KLAGENFURT             : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Klagenfurt\nDOP_AUT_K_OSTTIROL               : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Osttirol\nDOP_AUT_K_TAMSWEG                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Tamsweg\nDOP_AUT_K_VILLACH                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Villach\nDOP_AUT_K_WOLFSBERG              : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Wolfsberg\nDOP_AUT_K_ZELL_AM_SEE            : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zell am See\nDOP_AUT_K_ZELTWEG                : Digital Orthophotos (DOP) Austria - Land Kärnten: Orthofotos Flugblock Zeltweg\nDOP_AUT_ST_BISCHOFSHOFEN         : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Bischofshofen\nDOP_AUT_ST_GRAZ                  : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Graz\nDOP_AUT_ST_KLAGENFURT            : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Klagenfurt\nDOP_AUT_ST_MARIAZELL             : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Mariazell\nDOP_AUT_ST_MURTAL                : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Murtal\nDOP_AUT_ST_SUEDBURGENLAND        : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Suedburgenland\nDOP_AUT_ST_VILLACH               : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Villach\nDOP_AUT_ST_WINDISCHGARSTEN       : Digital Orthophotos (DOP) Austria - Land Steiermark: Orthophotos Flugblock Windischgarsten\nDROUGHT_VULNERABILITY            : Drought Vulnerability\nDSM_AUT                          : Austrian Digital Surface Model\nERS_ENVISAT_NRB                  : ERS-1/2 SAR and ENVISAT ASAR ARD Normalized Radar Backscatter (NRB)\nGFM                              : Global Flood Monitoring\nincal-hourly                     : INCA analysis hourly data (1km)\nINTRA_FIELD_CROP_GROWTH_POTENTIAL: Intra-field Crop Growth Potential\nRUCIO_SENTINEL2_MFCOVER          : Monthly Composite of Fraction of Vegetation Cover\nSAR_IMP_1P                       : ERS-1/2 SAR Image Mode Precision Level-1\nSAR_IMS_1P                       : ERS-1/2 SAR Image Mode Single Look Complex Level-1\nSENTINEL1_ALPS_WETSNOW           : Sentinel-1 Alps WetSnow\nSENTINEL1_GMR0                   : SENTINEL1 Radiometric Terrain Corrected Gamma Nought\nSENTINEL1_GRD                    : Sentinel-1 SAR L1 GRD\nSENTINEL1_GRD_COVERAGE           : Sentinel-1 Coverage Maps\nSENTINEL1_HPAR                   : SENTINEL1 Harmonic Parameters\nSentinel-1_Lacken_Extent         : SENTINEL-1 Lacken Extent\nSENTINEL1_MPLIA                  : SENTINEL1 Mean PLIA\nSentinel-1_Reed_Extent           : SENTINEL-1 Reed Extent\nSENTINEL1_SIG0_20M               : SENTINEL1 Sigma Nought (SIG0) Backscatter in 20 meter resolution\nSENTINEL1_SLC                    : Sentinel-1 SLC\nSentinel-2-Greenness-Austria     : Sentinel-2 Greenness Austria\nSENTINEL2_GRI_L1C                : Multi-Layer Copernicus Sentinel-2 GRI in L1C\nSENTINEL2_L1C                    : Sentinel-2 MSI Products: Level-1C data\nSENTINEL2_L1C_COVERAGE           : Sentinel-2 L1C Coverage Maps\nSENTINEL2_L2A                    : Sentinel-2 MSI Products: Level-2A data\nsentinel2-landsat8-l2f           : Harmonized Landsat and Sentinel 2 L2F\nSENTINEL2_MFCOVER                : Monthly Composite of Fraction of Vegetation Cover\nSENTINEL3_SRAL_L2                : Sentinel-3 Products: SRAL Level-2 data\nspartacus-daily                  : Spartacus Analysis Daily (1 km)\nSSM-RT0-SIG0-R-EXTR              : SSM-RT0-SIG0-R-EXTR\ntopo-dc-austria                  : Topographic datacube Austria\nVEGETATION_CHANGE_AUSTRIA        : Vegetation-Change-Austria\n"}],"key":"k4KEwTOX6A"}],"key":"KmLKKphfDu"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To get a specific collection from the catalog, we can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cey6CvcYwL"},{"type":"inlineCode","value":"client.get_collection()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vrOILlC4UV"},{"type":"text","value":" method and provide the collection name. We can then display its description, id, temporal and spatial extent, license, etc. In this notebook, we will work with the Sentinel-1 sigma naught 20m collection.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RMoAQkvxBt"}],"key":"MfSsfibbhm"}],"key":"zsWv3rERov"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"colllection_id = \"SENTINEL1_SIG0_20M\"\n\ncollection = eodc_catalog.get_collection(colllection_id)\ncollection","key":"jT6DsM4QT6"},{"type":"output","id":"Vi5XtEWR2tCj1F-wIArBZ","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"<CollectionClient id=SENTINEL1_SIG0_20M>","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"d740a50b22f985020a7e00949a8780d9","path":"/eo-datascience-cookbook/build/d740a50b22f985020a7e00949a8780d9.html"}}}],"key":"NqGqBmteRT"}],"key":"b4lyamUNNW"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Each collection has multiple items. An item is one spatio-temporal instance in the collection, for instance a satellite image. If items are needed for a specific timeframe or for a specific region of interest, we can define this as a query.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nNjhaPwvG5"}],"key":"BpIbV4RSND"}],"key":"vE6IcOKkOH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"time_range = \"2022-10-01/2022-10-07\"  # a closed range\n# time_range = \"2022-01\"  # whole month, same can be done for a year and a day\n# time_range = \"2022-01-01/..\"  # up to the current date, an open range\n# time_range = \"2022-01-01T05:34:46\"  # a specific time instance","key":"Zr4EphvRhO"},{"type":"output","id":"PRjd9CJzU3EKRLs8NQReY","data":[],"key":"VIE2HICb3I"}],"key":"izo9TdX8re"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A spatial region of interest can be defined in different ways. One option is to define a simple bounding box:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dDX0hQWRsJ"}],"key":"D6QSAkr6As"}],"key":"vIZkMVD9av"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"latmin, latmax = 46.3, 49.3  # South to North\nlonmin, lonmax = 13.8, 17.8  # West to East\n\nbounding_box = [lonmin, latmin, lonmax, latmax]","key":"bMsFCYtCXK"},{"type":"output","id":"VM1VWlEB-kJW07RsAHDUc","data":[],"key":"nHA2zlz1wY"}],"key":"euzhFajz2F"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If the region of interest is not rectangular, we can also define a polygon:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hx0XKueWHd"}],"key":"KLCGt36wTG"}],"key":"TVnSL2MFjM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# GEOJSON can be created on geojson.io\n\n# This specific area of interest is a rectangle, but since it is\n# a closed polygon it seems like it has five nodes\n\narea_of_interest = {\n    \"coordinates\": [\n        [\n            [17.710928010825853, 49.257630084442496],\n            [13.881798300915221, 49.257630084442496],\n            [13.881798300915221, 46.34747715326259],\n            [17.710928010825853, 46.34747715326259],\n            [17.710928010825853, 49.257630084442496],\n        ]\n    ],\n    \"type\": \"Polygon\",\n}","key":"GtNrWTg4IS"},{"type":"output","id":"sZ-_Hk8GtntigCySHdxDy","data":[],"key":"ZOosU7kVaM"}],"key":"YSaSg763mc"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Using our previously loaded STAC catalog, we can now search for items fullfilling our query. In this example we are using the bounding box. If we want to use an area of interest specified in the geojson format - one has to use the intersects parameter as documented in the comment below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EAg9TDxtP7"}],"key":"iUDw8bw6F3"}],"key":"ljlI6j7wbc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"search = eodc_catalog.search(\n    collections=colllection_id,  # can also be a list of several collections\n    bbox=bounding_box,  # search by bounding box\n    # intersects=area_of_interest,  # GeoJSON search\n    datetime=time_range,\n    # max_items=1  # number of max items to load\n)\n\n# If we comment everything besides colllection_id, we will load whole\n# collection for available region and time_range\n\nitems_eodc = search.item_collection()\nprint(f\"On EODC we found {len(items_eodc)} items for the given search query\")","key":"NA1pgAq1Qm"},{"type":"output","id":"LCpxI8qvjJeLMSzghHdXd","data":[{"output_type":"stream","name":"stdout","text":"On EODC we found 52 items for the given search query\n"}],"key":"C3TvUmpvld"}],"key":"J7JaVGbFK2"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now, we can fetch a single item, in this case a Sentinel-1 image, from the query results. A good practice is to always check what metadata the data provider has stored on the item level. This can be done by looking into the item properties.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R15H30zWz2"}],"key":"SDvWzC7ccD"}],"key":"xbL03s5Pyj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"item = items_eodc[0]\nitem.properties","key":"S4v5RIuQUK"},{"type":"output","id":"mvfTluR3GTNcm7b0sAZxq","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"{'gsd': 20,\n 'parent': 'S1A_IW_GRDH_1SDV_20221007T170811_20221007T170836_045339_056BBA_D830.zip',\n 'checksum': '576abe68a715e5ee177d8b640871e873',\n 'datetime': '2022-10-07T17:08:11Z',\n 'blocksize': {'x': 15000, 'y': 5},\n 'proj:bbox': [4800000, 1500000, 5100000, 1800000],\n 'proj:wkt2': 'PROJCS[\"Azimuthal_Equidistant\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Azimuthal_Equidistant\"],PARAMETER[\"latitude_of_center\",53],PARAMETER[\"longitude_of_center\",24],PARAMETER[\"false_easting\",5837287.81977],PARAMETER[\"false_northing\",2121415.69617],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]]]',\n 'proj:shape': [15000, 15000],\n 'Equi7_TileID': 'EU020M_E048N015T3',\n 'constellation': 'sentinel-1',\n 'proj:geometry': {'type': 'Polygon',\n  'coordinates': [[[4800000.0, 1500000.0],\n    [4800000.0, 1800000.0],\n    [5100000.0, 1800000.0],\n    [5100000.0, 1500000.0],\n    [4800000.0, 1500000.0]]]},\n 'proj:transform': [20, 0, 4800000, 0, -20, 1800000],\n 'sat:orbit_state': 'ascending',\n 'sar:product_type': 'GRD',\n 'slice_gap_filled': False,\n 'sar:polarizations': ['VH', 'VV'],\n 'sar:frequency_band': 'C',\n 'sat:relative_orbit': 117,\n 'sar:instrument_mode': 'IW',\n 'border_noise_removed': True,\n 'sar:center_frequency': 5.405,\n 'sar:resolution_range': 40,\n 'thermal_noise_removed': True,\n 'sar:resolution_azimuth': 40,\n 'sar:pixel_spacing_range': 20,\n 'sar:observation_direction': 'right',\n 'sar:pixel_spacing_azimuth': 20,\n 'sat:platform_international_designator': '2014-016A'}","content_type":"text/plain"}}}],"key":"YmQ8hM3iNJ"}],"key":"dfczyQYJej"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For now, let’s display only the vertical-vertical (VV) polarized band of the item and some information about the data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LrFCclTNNn"}],"key":"hdNLbjEGlv"}],"key":"BShFTfKN9U"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0]","key":"yT0WN7mEaK"},{"type":"output","id":"nFieK7guUoFv-MiNRuoG0","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"{'scale': 10,\n 'nodata': -9999,\n 'offset': 0,\n 'data_type': 'int16',\n 'spatial_resolution': 20}","content_type":"text/plain"}}}],"key":"SePzi2eldL"}],"key":"Vi3jCqHDvs"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the EODC STAC catalogue an item can conveniently be displayed using its thumbnail.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l2exAkc8Wy"}],"key":"eYDQFk7W72"}],"key":"wWTxVCrDRP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"item.assets[\"thumbnail\"].href","key":"E5zKPmmREk"},{"type":"output","id":"X6k87xGW3_KpOBtXDMPa8","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"'https://data.eodc.eu/collections/SENTINEL1_SIG0_20M/V1M1R1/EQUI7_EU020M/E048N015T3/SIG0_20221007T170811__VV_A117_E048N015T3_EU020M_V1M1R1_S1AIWGRDH_TUWIEN.tif/thumbnail'","content_type":"text/plain"}}}],"key":"I7axqoDmpJ"}],"key":"WD3v3fus4d"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we will plot the data on a map using the thumbnail and the python package ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E9N9d3qUYO"},{"type":"link","url":"https://python-visualization.github.io/folium/latest/user_guide.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"folium","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Fr3UoXck1O"}],"urlSource":"https://python-visualization.github.io/folium/latest/user_guide.html","key":"ACRr3CLJCL"},{"type":"text","value":". This is an easy way to quickly check how the data found by a search query looks on a map.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y5Ez18AU7G"}],"key":"S6F5MchLK1"}],"key":"qSKIRkwia9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"map = folium.Map(\n    location=[(latmin + latmax) / 2, (lonmin + lonmax) / 2],\n    zoom_start=7,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfor item in items_eodc:\n    # url leading to display of an item, can also be used as hyperlink\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap","key":"KU5701LI34"},{"type":"output","id":"6_p_ByIkmBnyMlrOAOBpA","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"<folium.folium.Map at 0x7f8bb5700ec0>","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"ae2839c96fe4721b2ac0debe4f3dcc30","path":"/eo-datascience-cookbook/build/ae2839c96fe4721b2ac0debe4f3dcc30.html"}}}],"key":"sG6V5efXXh"}],"key":"xgNmwFWK6w"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Figure 1: Map of study area. Blue rectangle is the area covered by the discovered data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XBAQvr8XuW"}],"key":"Vk1Ia1r3Se"}],"key":"CgO7Fjnnkp"},{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Data Reading","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jtcWmQtyHQ"}],"identifier":"data-reading","label":"Data Reading","html_id":"data-reading","implicit":true,"key":"s18oyC9J5I"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"STAC can also be a useful tool for the discovery of data, however it only loads metadata. This saves memory, but if one would like to do further analysis, the data has to be loaded into memory or downloaded on disk.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hPteBkzjWR"}],"key":"qwlBL7AXal"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In the following, we will demonstrate this with the library ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"H6tZnUg1iS"},{"type":"inlineCode","value":"odc-stac","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"EjRCtK9g59"},{"type":"text","value":". Here we can define what data will loaded as ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"teKVwEP88g"},{"type":"inlineCode","value":"bands","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CvQnR9164B"},{"type":"text","value":"; in this case VV sigma naught. Moreover we can resample the data by providing any coordinate reference system (CRS) and resolution as well as a method for resampling of continuos data (e.g. bilinear resampling). In the example below we use the EQUI7 Grid of Europe and a 20 meter sampling. This is the native format of sigma naught stored at EODC, so there will be no actual resampling. Note, also, that resampling is not advisable for this data, as it is provided on a logarithmic scale. More about this in the notebook “Backscattering Coefficients”.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"b8mtM1iEfq"}],"key":"y69wZx5Ves"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"The chunks argument is an advancement method for performing parallel computations on the data. We will not cover this in further detail.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"eE5ZDJIP0r"}],"key":"thZKTnTW1u"}],"key":"fOq9osL6m2"}],"key":"llUiazXS0N"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bands = \"VV\"  # Vertical-vertical polarized\ncrs = \"EPSG:27704\"  # Coordinate Reference System: EQUI7 Grid of Europe\nres = 20  # 20 meter\nchunks = {\"time\": 1, \"latitude\": 1000, \"longitude\": 1000}\nsig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    crs=crs,\n    resolution=res,\n    bbox=bounding_box,\n    chunks=chunks,\n    resampling=\"bilinear\",\n)","key":"GCo58wADoe"},{"type":"output","id":"P_kP1SI3l1iM7RZYRfUcN","data":[],"key":"c3VmW3a75g"}],"key":"lj00PT1gWw"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s have a look at the VV polarized band of the dataset.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PCkAF1EteN"}],"key":"zdWLJCOQMY"}],"key":"o5iEkS1M82"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sig0_dc.VV","key":"ROA1BgJ71m"},{"type":"output","id":"Kp-tVlvAf8XZa_B7lu9Ym","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray 'VV' (time: 31, y: 18269, x: 16725)> Size: 19GB\ndask.array<VV, shape=(31, 18269, 16725), dtype=int16, chunksize=(1, 18269, 16725), chunktype=numpy.ndarray>\nCoordinates:\n  * time         (time) datetime64[ns] 248B 2022-10-01T05:09:56 ... 2022-10-0...\n  * y            (y) float64 146kB 1.762e+06 1.762e+06 ... 1.396e+06 1.396e+06\n  * x            (x) float64 134kB 5.052e+06 5.052e+06 ... 5.387e+06 5.387e+06\n    spatial_ref  int32 4B 27704\nAttributes:\n    nodata:   -9999","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"809646073d181d9216fefa04c60b0d56","path":"/eo-datascience-cookbook/build/809646073d181d9216fefa04c60b0d56.html"}}}],"key":"QX5zdj20Q4"}],"key":"x6SFy0dPcl"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As we can see, the data is stored as a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XwfEOyzseI"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bXenfM2zxT"},{"type":"text","value":" DataArray. Xarray is a convenient package for multidimensional labeled arrays, like temperature, humidity, pressure, different bands of satellite imagery, and so on. ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pe6NOdbxWJ"},{"type":"link","url":"https://docs.xarray.dev/en/stable/index.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The link","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"plwiHrLBkp"}],"urlSource":"https://docs.xarray.dev/en/stable/index.html","key":"TezrBaNpgD"},{"type":"text","value":" provides detailed documentation. In a later notebook we will explore some more of the functionality of ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CR33tTjxFJ"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jPeIrMAKsn"},{"type":"text","value":". As we can see in the coordinates, the data here consists of 21 time steps.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GTTMZBn6bC"}],"key":"xMOqSht720"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In general, data from STAC is “lazily” loaded, which means that the structure of the DataArray is constructed, but the data is not loaded yet. It is loaded only at instance when it is needed, for example, for plotting, computations, and so on.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"koptXWKCRS"}],"key":"sTnIJA7bKH"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Since the DataArray has currently a size of almost 18 GiB, we will subset it to the region of Vienna.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"m3n3a6qrEy"}],"key":"UQ29sq5OSR"}],"key":"N66efrl5X0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create a bounding box covering the region of Vienna\nlatmin_smaller, latmax_smaller = 48, 48.4\nlonmin_smaller, lonmax_smaller = 16, 16.5\n\nsmaller_bounding_box = [\n    [latmin_smaller, lonmin_smaller],\n    [latmax_smaller, lonmax_smaller],\n]\n\nmap = folium.Map(\n    location=[\n        (latmin_smaller + latmax_smaller) / 2,\n        (lonmin_smaller + lonmax_smaller) / 2,\n    ],\n    zoom_start=8,\n    zoom_control=False,\n    scrollWheelZoom=False,\n    dragging=False,\n)\n\nfolium.GeoJson(area_of_interest, name=\"Area of Interest\").add_to(map)\n\nfolium.Rectangle(\n    bounds=smaller_bounding_box,\n    color=\"red\",\n).add_to(map)\n\nfor item in items_eodc:\n    image_url = item.assets[\"thumbnail\"].href\n    bounds = item.bbox\n    folium.raster_layers.ImageOverlay(\n        image=image_url,\n        bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],\n    ).add_to(map)\n\nfolium.LayerControl().add_to(map)\n\nmap","key":"AARXsK4134"},{"type":"output","id":"qzgg3e4iZv4Np5YXTRRId","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"<folium.folium.Map at 0x7f8bb5474410>","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"62267bf69f2567d401713b31526037a1","path":"/eo-datascience-cookbook/build/62267bf69f2567d401713b31526037a1.html"}}}],"key":"iixGcihrwL"}],"key":"pTHBGrQPJy"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Figure 2: Map of study area. Blue rectangle is the area covered by the discovered data. Red rectangle covers the selected data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DfjdGAes5p"}],"key":"PAA23Uizer"}],"key":"M8sebmeA3a"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Create a new dataset with the smaller bounding box covering the region of Vienna. We will leave out the arguments for resampling and directly use the native format as defined in the metadata.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IJokEPv0BD"}],"key":"NfRl2p3pUd"}],"key":"iIyNmAX7ZA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sig0_dc = odc_stac.load(\n    items_eodc,\n    bands=bands,\n    bbox=[lonmin_smaller, latmin_smaller, lonmax_smaller, latmax_smaller],\n    chunks=chunks,\n)","key":"iZAIVe1yrn"},{"type":"output","id":"Y4a_CaDHCeWaOsD1u83d6","data":[],"key":"XvMJVgqewH"}],"key":"E6a4eutqVQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Due to the way the data is acquired and stored, some items include “no data” areas. In our case, no data has the value -9999, but this can vary from data provider to data provider. This information can usually be found in the metadata. Furthermore, to save memory, data is often stored as integer (e.g. 25) and not in float (e.g. 2.5) format. For this reason, the backscatter values are often multiplied by a scale factor, in this case factor 10.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EvzDXaVfz9"}],"key":"V0j2MKXbFA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As Sentinel-1 satellites overpasses Austria every few days, only some time steps of the dataset will have physical data. As a final step, we will now decode the data and create a plot of two consecutive Sentinel-1 acquisitions of Vienna.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WXwNVKk6Zr"}],"key":"IbnpRxzevP"}],"key":"OlXQ1TU2ph"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Retrieve the scale factor and NoData value from the metadata. raster:bands is\n# a STAC raster extension\nscale = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"scale\"]\nnodata = item.assets[\"VV\"].extra_fields.get(\"raster:bands\")[0][\"nodata\"]\n\n# Decode data with the NoData value and the scale factor\nsig0_dc = sig0_dc.where(sig0_dc != nodata) / scale\n\n# We should remove unnecessary dates when there was no data\n# (no satellite overpass)\nsig0_dc = sig0_dc.dropna(dim=\"time\")","key":"bZwXRIqd0V"},{"type":"output","id":"NB0vikEUgURZm7F1hIJRr","data":[{"output_type":"stream","name":"stderr","text":"Aborting load due to failure while reading: https://data.eodc.eu/collections/SENTINEL1_SIG0_20M/V1M1R1/EQUI7_EU020M/E051N015T3/SIG0_20221002T165929__VV_A044_E051N015T3_EU020M_V1M1R1_S1AIWGRDH_TUWIEN.tif:1\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mCPLE_AppDefinedError\u001b[39m                      Traceback (most recent call last)\n\u001b[31mCPLE_AppDefinedError\u001b[39m: TIFFFillStrip:Read error at scanline 7965; got 4289 bytes, expected 11732\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mCPLE_AppDefinedError\u001b[39m                      Traceback (most recent call last)\n\u001b[31mCPLE_AppDefinedError\u001b[39m: TIFFReadEncodedStrip() failed.\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mCPLE_AppDefinedError\u001b[39m                      Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_io.pyx:969\u001b[39m, in \u001b[36mrasterio._io.DatasetReaderBase._read\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_io.pyx:199\u001b[39m, in \u001b[36mrasterio._io.io_multi_band\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_io.pyx:205\u001b[39m, in \u001b[36mrasterio._io.io_multi_band\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_err.pyx:325\u001b[39m, in \u001b[36mrasterio._err.StackChecker.exc_wrap_int\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[31mCPLE_AppDefinedError\u001b[39m: SIG0_20221002T165929__VV_A044_E051N015T3_EU020M_V1M1R1_S1AIWGRDH_TUWIEN.tif, band 1: IReadBlock failed at X offset 0, Y offset 1594: TIFFReadEncodedStrip() failed.\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mRasterioIOError\u001b[39m                           Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[17]\u001b[39m\u001b[32m, line 11\u001b[39m\n\u001b[32m      7\u001b[39m sig0_dc = sig0_dc.where(sig0_dc != nodata) / scale\n\u001b[32m      9\u001b[39m \u001b[38;5;66;03m# We should remove unnecessary dates when there was no data\u001b[39;00m\n\u001b[32m     10\u001b[39m \u001b[38;5;66;03m# (no satellite overpass)\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m11\u001b[39m sig0_dc = \u001b[43msig0_dc\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdropna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdim\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mtime\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/xarray/core/dataset.py:6370\u001b[39m, in \u001b[36mDataset.dropna\u001b[39m\u001b[34m(self, dim, how, thresh, subset)\u001b[39m\n\u001b[32m   6368\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m dim \u001b[38;5;129;01min\u001b[39;00m array.dims:\n\u001b[32m   6369\u001b[39m         dims = [d \u001b[38;5;28;01mfor\u001b[39;00m d \u001b[38;5;129;01min\u001b[39;00m array.dims \u001b[38;5;28;01mif\u001b[39;00m d != dim]\n\u001b[32m-> \u001b[39m\u001b[32m6370\u001b[39m         count += \u001b[43mto_numpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43marray\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcount\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdims\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   6371\u001b[39m         size += math.prod([\u001b[38;5;28mself\u001b[39m.sizes[d] \u001b[38;5;28;01mfor\u001b[39;00m d \u001b[38;5;129;01min\u001b[39;00m dims])\n\u001b[32m   6373\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m thresh \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/xarray/namedarray/pycompat.py:117\u001b[39m, in \u001b[36mto_numpy\u001b[39m\u001b[34m(data, **kwargs)\u001b[39m\n\u001b[32m    115\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m is_chunked_array(data):\n\u001b[32m    116\u001b[39m     chunkmanager = get_chunked_array_type(data)\n\u001b[32m--> \u001b[39m\u001b[32m117\u001b[39m     data, *_ = \u001b[43mchunkmanager\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    118\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data, array_type(\u001b[33m\"\u001b[39m\u001b[33mcupy\u001b[39m\u001b[33m\"\u001b[39m)):\n\u001b[32m    119\u001b[39m     data = data.get()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/xarray/namedarray/daskmanager.py:85\u001b[39m, in \u001b[36mDaskManager.compute\u001b[39m\u001b[34m(self, *data, **kwargs)\u001b[39m\n\u001b[32m     80\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mcompute\u001b[39m(\n\u001b[32m     81\u001b[39m     \u001b[38;5;28mself\u001b[39m, *data: Any, **kwargs: Any\n\u001b[32m     82\u001b[39m ) -> \u001b[38;5;28mtuple\u001b[39m[np.ndarray[Any, _DType_co], ...]:\n\u001b[32m     83\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mdask\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01marray\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m compute\n\u001b[32m---> \u001b[39m\u001b[32m85\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/dask/base.py:681\u001b[39m, in \u001b[36mcompute\u001b[39m\u001b[34m(traverse, optimize_graph, scheduler, get, *args, **kwargs)\u001b[39m\n\u001b[32m    678\u001b[39m     expr = expr.optimize()\n\u001b[32m    679\u001b[39m     keys = \u001b[38;5;28mlist\u001b[39m(flatten(expr.__dask_keys__()))\n\u001b[32m--> \u001b[39m\u001b[32m681\u001b[39m     results = \u001b[43mschedule\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexpr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    683\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m repack(results)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_builder.py:436\u001b[39m, in \u001b[36m_dask_loader_tyx\u001b[39m\u001b[34m(srcs, gbt, iyx, prefix_dims, postfix_dims, cfg, rdr, env, load_state, selection)\u001b[39m\n\u001b[32m    434\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m rdr.restore_env(env, load_state):\n\u001b[32m    435\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m ti, ti_srcs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(srcs):\n\u001b[32m--> \u001b[39m\u001b[32m436\u001b[39m         \u001b[43m_fill_nd_slice\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    437\u001b[39m \u001b[43m            \u001b[49m\u001b[43mti_srcs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgbox\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcfg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mchunk\u001b[49m\u001b[43m[\u001b[49m\u001b[43mti\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mydim\u001b[49m\u001b[43m=\u001b[49m\u001b[43mydim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mselection\u001b[49m\u001b[43m=\u001b[49m\u001b[43mselection\u001b[49m\n\u001b[32m    438\u001b[39m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    439\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m chunk\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_builder.py:513\u001b[39m, in \u001b[36m_fill_nd_slice\u001b[39m\u001b[34m(srcs, dst_gbox, cfg, dst, ydim, selection)\u001b[39m\n\u001b[32m    510\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m dst\n\u001b[32m    512\u001b[39m src, *rest = srcs\n\u001b[32m--> \u001b[39m\u001b[32m513\u001b[39m yx_roi, pix = \u001b[43msrc\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcfg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst_gbox\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mselection\u001b[49m\u001b[43m=\u001b[49m\u001b[43mselection\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    514\u001b[39m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(yx_roi) == \u001b[32m2\u001b[39m\n\u001b[32m    515\u001b[39m \u001b[38;5;28;01massert\u001b[39;00m pix.ndim == dst.ndim\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_rio.py:115\u001b[39m, in \u001b[36mRioReader.read\u001b[39m\u001b[34m(self, cfg, dst_geobox, dst, selection)\u001b[39m\n\u001b[32m    107\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mread\u001b[39m(\n\u001b[32m    108\u001b[39m     \u001b[38;5;28mself\u001b[39m,\n\u001b[32m    109\u001b[39m     cfg: RasterLoadParams,\n\u001b[32m   (...)\u001b[39m\u001b[32m    113\u001b[39m     selection: Optional[ReaderSubsetSelection] = \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[32m    114\u001b[39m ) -> \u001b[38;5;28mtuple\u001b[39m[\u001b[38;5;28mtuple\u001b[39m[\u001b[38;5;28mslice\u001b[39m, \u001b[38;5;28mslice\u001b[39m], np.ndarray]:\n\u001b[32m--> \u001b[39m\u001b[32m115\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mrio_read\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_src\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcfg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst_geobox\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mselection\u001b[49m\u001b[43m=\u001b[49m\u001b[43mselection\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_rio.py:526\u001b[39m, in \u001b[36mrio_read\u001b[39m\u001b[34m(src, cfg, dst_geobox, dst, selection)\u001b[39m\n\u001b[32m    520\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m cfg.fail_on_error:\n\u001b[32m    521\u001b[39m         log.error(\n\u001b[32m    522\u001b[39m             \u001b[33m\"\u001b[39m\u001b[33mAborting load due to failure while reading: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m:\u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[33m\"\u001b[39m,\n\u001b[32m    523\u001b[39m             src.uri,\n\u001b[32m    524\u001b[39m             src.band,\n\u001b[32m    525\u001b[39m         )\n\u001b[32m--> \u001b[39m\u001b[32m526\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m e\n\u001b[32m    527\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m rasterio.errors.RasterioError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    528\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m cfg.fail_on_error:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_rio.py:512\u001b[39m, in \u001b[36mrio_read\u001b[39m\u001b[34m(src, cfg, dst_geobox, dst, selection)\u001b[39m\n\u001b[32m    508\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m roi, out.transpose([\u001b[32m1\u001b[39m, \u001b[32m2\u001b[39m, \u001b[32m0\u001b[39m])\n\u001b[32m    510\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    511\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m fixup_out(\n\u001b[32m--> \u001b[39m\u001b[32m512\u001b[39m         \u001b[43m_rio_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43msrc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcfg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst_geobox\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mprep_dst\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdst\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mselection\u001b[49m\u001b[43m=\u001b[49m\u001b[43mselection\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    513\u001b[39m     )\n\u001b[32m    514\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m (\n\u001b[32m    515\u001b[39m     rasterio.errors.RasterioIOError,\n\u001b[32m    516\u001b[39m     rasterio.errors.RasterBlockError,\n\u001b[32m    517\u001b[39m     rasterio.errors.WarpOperationError,\n\u001b[32m    518\u001b[39m     rasterio.errors.WindowEvaluationError,\n\u001b[32m    519\u001b[39m ) \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    520\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m cfg.fail_on_error:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_rio.py:573\u001b[39m, in \u001b[36m_rio_read\u001b[39m\u001b[34m(src, cfg, dst_geobox, dst, selection)\u001b[39m\n\u001b[32m    571\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m ovr_idx \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    572\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m rio_env(VSI_CACHE=\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m573\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_do_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrasterio\u001b[49m\u001b[43m.\u001b[49m\u001b[43mband\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrdr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbidx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcfg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst_geobox\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdst\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdst\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    575\u001b[39m \u001b[38;5;66;03m# read from overview\u001b[39;00m\n\u001b[32m    576\u001b[39m \u001b[38;5;28;01mwith\u001b[39;00m rasterio.open(\n\u001b[32m    577\u001b[39m     src.uri, \u001b[33m\"\u001b[39m\u001b[33mr\u001b[39m\u001b[33m\"\u001b[39m, sharing=\u001b[38;5;28;01mFalse\u001b[39;00m, overview_level=ovr_idx\n\u001b[32m    578\u001b[39m ) \u001b[38;5;28;01mas\u001b[39;00m rdr_ovr:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/eo-datascience-cookbook/lib/python3.13/site-packages/odc/loader/_rio.py:430\u001b[39m, in \u001b[36m_do_read\u001b[39m\u001b[34m(src, cfg, dst_geobox, rr, dst)\u001b[39m\n\u001b[32m    427\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m (roi_dst, _dst)\n\u001b[32m    429\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m rr.paste_ok \u001b[38;5;129;01mand\u001b[39;00m rr.read_shrink == \u001b[32m1\u001b[39m:\n\u001b[32m--> \u001b[39m\u001b[32m430\u001b[39m     \u001b[43mrdr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43msrc\u001b[49m\u001b[43m.\u001b[49m\u001b[43mbidx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout\u001b[49m\u001b[43m=\u001b[49m\u001b[43m_dst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwindow\u001b[49m\u001b[43m=\u001b[49m\u001b[43mw_\u001b[49m\u001b[43m[\u001b[49m\u001b[43mrr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mroi_src\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    432\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m dst_nodata \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m same_nodata(src_nodata, dst_nodata):\n\u001b[32m    433\u001b[39m         \u001b[38;5;66;03m# remap nodata from source to output\u001b[39;00m\n\u001b[32m    434\u001b[39m         np.copyto(_dst, dst_nodata, where=nodata_mask(_dst, src_nodata))\n\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_io.pyx:644\u001b[39m, in \u001b[36mrasterio._io.DatasetReaderBase.read\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[36mFile \u001b[39m\u001b[32mrasterio/_io.pyx:972\u001b[39m, in \u001b[36mrasterio._io.DatasetReaderBase._read\u001b[39m\u001b[34m()\u001b[39m\n\n\u001b[31mRasterioIOError\u001b[39m: Read failed. See previous exception for details.","ename":"RasterioIOError","evalue":"Read failed. See previous exception for details."}],"key":"Eq8cOADYuM"}],"key":"LOCfzhkPA4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sig0_dc.VV.plot(col=\"time\", robust=True, cmap=\"Greys_r\", aspect=1, size=10)","key":"XCtKaIu2hd"},{"type":"output","id":"_VkMt6WeQMJrBcudS0iu5","data":[],"key":"x1rEy20ppY"}],"key":"zDOookOasY"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Figure 3: Sentinel-1 microwave backscatter image for two timeslices.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CCQs4jlBwV"}],"key":"Z4NL13w8CQ"}],"key":"Pgx7P1ieAU"}],"key":"OINos4iYZ3"}],"key":"xLPvkGY0iB"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Microwave Remote Sensing","url":"/notebooks/courses/microwave-remote-sensing","group":"Courses"},"next":{"title":"Unit Conversion","url":"/notebooks/courses/microwave-remote-sensing/unit-01/in-class-exercise-1","group":"Courses"}}},"domain":"http://localhost:3000"}