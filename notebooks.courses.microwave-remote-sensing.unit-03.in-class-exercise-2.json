{"version":2,"kind":"Notebook","sha256":"6e475292a9038ab03c74e136fb1a84fd31f56030f463e4de28b7b49035c00fa2","slug":"notebooks.courses.microwave-remote-sensing.unit-03.in-class-exercise-2","location":"/notebooks/courses/microwave-remote-sensing/unit_03/09_in_class_exercise.ipynb","dependencies":[],"frontmatter":{"title":"Phase Unwrapping","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Wolfgang Wagner","given":"Wolfgang","family":"Wagner"},"name":"Wolfgang Wagner","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Martin Schobben","given":"Martin","family":"Schobben"},"name":"Martin Schobben","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Nikolas Pikall","given":"Nikolas","family":"Pikall"},"name":"Nikolas Pikall","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Joseph Wagner","given":"Joseph","family":"Wagner"},"name":"Joseph Wagner","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Davide Festa","given":"Davide","family":"Festa"},"name":"Davide Festa","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Felix David Reuß","given":"Felix David","family":"Reuß"},"name":"Felix David Reuß","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Luka Jović","given":"Luka","family":"Jović"},"name":"Luka Jović","id":"contributors-myst-generated-uid-6"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":2}},"thumbnail":"/eo-datascience-cookbook/build/3f26b4039a027763e4d44920b3792e29.png","exports":[{"format":"ipynb","filename":"09_in_class_exercise.ipynb","url":"/eo-datascience-cookbook/build/09_in_class_exercise-d321f37fd9d1593a24e3a3999ff024ad.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The goal of this notebook is to read an interferogram image (i.e., 2-D array of phase values) and unwrap it. Phase unwrapping is a critical process in interferometry, which involves recovering unambiguous phase data from the interferogram.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Tx36mRfZtg"}],"key":"cU7Gio3qMQ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"A SAR interferogram represents the phase difference between two radar acquisitions (i.e., two SLC images). The phase difference is usually wrapped within a range of 0 to 2π, because the phase is inherently cyclical. When the true phase difference exceeds 2π, it gets “wrapped” into this range, creating a discontinuous phase signal. Phase unwrapping refers to the process of reconstructing the continuous phase field from the wrapped phase data.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZraTEBkMac"}],"key":"oYUgjzK4ov"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Unwrapping an interferogram is essential for extracting correct information contained in the phase such as surface topography and earth surface deformations.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qNT8tAoM6z"}],"key":"dFOArOnotF"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"There are many approaches that tried to solve the unwrapping problem, tackling challenging scenarios involving noise or large phase discontinuities. Here we present the Network-flow Algorithm for phase unwrapping (C. W. Chen and H. A. Zebker, 2000), which is implemented in the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Ogo94wc8Bp"},{"type":"inlineCode","value":"snaphu","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"GDKAzjL5ce"},{"type":"text","value":" package.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"NEyE9WtMqm"}],"key":"ru7Uk9olrW"},{"type":"heading","depth":2,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Loading Data","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"vAQQhrUDLF"}],"identifier":"loading-data","label":"Loading Data","html_id":"loading-data","implicit":true,"key":"WPl3kOGOCK"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"The data is stored on the Jupyterhub server, so we need to load it using their respective paths.\nIn this notebook we will use the resulting wrapped interferogram from notebook “Interferograms”, but we need to process it in the radar geometry in order to unwrap it (while in notebook “Interferograms” we end the whole process by performing the geocoding, just for better visualization purposes).","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"eHZFhFrG62"}],"key":"X1oOG68Ik7"}],"key":"zNifNCM6jj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import contextlib\nimport os\n\nimport cmcrameri as cmc  # noqa: F401\nimport intake\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport snaphu\nimport xarray as xr\nfrom matplotlib import patches","key":"ui2NweAj6o"},{"type":"output","id":"M0YBblmypS5bVlp3aDz6p","data":[],"key":"MIaCO1RFTU"}],"key":"XcURYXPhJl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"uri = \"https://git.geo.tuwien.ac.at/public_projects/microwave-remote-sensing/-/raw/main/microwave-remote-sensing.yml\"\ncat = intake.open_catalog(uri)\nds = cat.complex.read().compute()\nds[\"cmplx\"] = ds[\"real\"] + ds[\"imag\"] * 1j","key":"XK5fbIPQgX"},{"type":"output","id":"A_OfdvfBdRk3lziKmuEHB","data":[],"key":"qTSLIB8vUE"}],"key":"mnodlLdnco"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set cyclic and linear colormaps\ncmap_cyc = sns.color_palette(\"hls\", as_cmap=True)  # \"cmc.romaO\"\ncmap_lin = \"cmc.roma_r\"\ncmap_disp = \"cmc.vik\"\n\n# Create a mask for the areas which have no data\nmask = ds.phase.where(ds.phase == 0, True, False).astype(bool)","key":"YV5tR9GPZB"},{"type":"output","id":"HMCVfUShUrLp3hOnuIcXd","data":[],"key":"nXBNNGYacw"}],"key":"Yx0FiYopVa"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s start by displaying the interferogram that needs to be unwrapped. Recall that due to the Slant Range geometry and the satellite acquisition pass (ascending, in our case), the image appears north/south flipped (with respect to the geocoded image)!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xfs8GVFbJd"}],"key":"qplrpbhcPL"}],"key":"FHkAEW7JKf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Plot Phase Interferogram Image\nfig, axs = plt.subplots(figsize=(6, 6))\n\n(\n    ds.phase.where(mask)\n    .plot.imshow(cmap=cmap_cyc, zorder=1)\n    .axes.set_title(\"Phase Interferogram Image (Wrapped)\")\n)\nplt.show()","key":"yzNuzyiZPc"},{"type":"output","id":"Fz1Y5gCM6-QcbGyI95WjW","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 600x600 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"37aff48657bee72578bc5a8f2f62200c","path":"/eo-datascience-cookbook/build/37aff48657bee72578bc5a8f2f62200c.png"}}}],"key":"SkwU7LbzHk"}],"key":"WYa8GUHC5V"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Phase Unwrapping","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"y9ttJlkoUH"}],"identifier":"phase-unwrapping","label":"Phase Unwrapping","html_id":"phase-unwrapping","implicit":true,"key":"ueR6Z7HFCT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"As we will be doing the unwrapping multiple times in this notebook let’s create a function that does the unwrapping for us on ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rvWapQAzwY"},{"type":"inlineCode","value":"xarray DataArray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"edS8ug3nd9"},{"type":"text","value":" objects.\nThe actual core function where the unwrapping is happening is ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hzUdsztqAq"},{"type":"inlineCode","value":"snaphu.unwrap_phase","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lNM2LGnPNY"},{"type":"text","value":" from the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"x8ajsZNpuf"},{"type":"inlineCode","value":"snaphu","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XiEl6TFFhb"},{"type":"text","value":" package. This function needs a 2D numpy array as input, where each pixel value is a complex number.\nTherefore we have to convert the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BKraPXQa78"},{"type":"inlineCode","value":"xarray DataArray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fgGT3qOkrl"},{"type":"text","value":" to a 2D numpy array with complex values. We do that by combining the phase and intensity bands to a complex array.\nThe actual unwrapping is essentially an addition of the phase values, such that the values are continuous and not between ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mwlwielIzQ"},{"type":"inlineMath","value":"-\\pi","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">-\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>","key":"brDkNiYFom"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"k5ZEY7FdnP"},{"type":"inlineMath","value":"\\pi","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>","key":"LVNMmDuRmf"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cgTvsbHvf2"}],"key":"MyyNT2lXed"},{"type":"image","url":"/eo-datascience-cookbook/build/3f26b4039a027763e4d44920b3792e29.png","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"GfUVedtKIk","urlSource":"https://forum.step.esa.int/uploads/default/original/3X/5/d/5d9d18e2a3121a4bb80cb93a8f62aed742e35fc2.png"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Figure 1: Illustration of how the unwrapping of the phase works. (Source: ESA)","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"eAqU1oGyG0"}],"key":"WkPO8Yy7yv"},{"type":"text","value":".","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Wo8A9d3jhi"}],"key":"OVndukyBBf"}],"key":"Vdbexsu840"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@contextlib.contextmanager\ndef suppress_output():\n    with open(os.devnull, \"w\") as devnull:\n        old_stdout = os.dup(1)\n        old_stderr = os.dup(2)\n\n        os.dup2(devnull.fileno(), 1)\n        os.dup2(devnull.fileno(), 2)\n\n        try:\n            yield\n        finally:\n            os.dup2(old_stdout, 1)\n            os.dup2(old_stderr, 2)\n            os.close(old_stdout)\n            os.close(old_stderr)\n\n\ndef unwrap_array(\n    data: xr.DataArray,\n    complex_var: str = \"cmplx\",\n    ouput_var: str = \"unwrapped\",\n    mask: xr.DataArray = True,\n    coherence: xr.DataArray = None,\n    mask_nodata_value: int = 0,\n    coh_low_threshold: float = None,\n    coh_high_threshold: float = None,\n    nlooks=1.0,\n    cost=\"smooth\",\n    init=\"mcf\",\n    **kwargs,\n) -> xr.DataArray:\n    \"\"\"Unwraps the phase data using the snaphu algorithm.\n\n    Parameters\n    ----------\n    data: xarray DataArray with complex numbers\n    complex_var: Name of the variable with the complex numbers\n    ouput_var: Name of the variable with the unwrapped phase\n    mask: xarray DataArray with mask values\n    coherence: xarray DataArray with coherence values (optional)\n    mask_nodata_value: Value of the no data pixels in the mask\n    coh_low_threshold: Lower threshold for the coherence values\n    coh_high_threshold: Higher threshold for the coherence values\n\n    Returns\n    -------\n    xarray DataArray with the unwrapped phase\n\n    \"\"\"\n    # Get the complex data\n    data_arr = data[complex_var]\n\n    # Create a mask for areas with no data\n    if mask is True:\n        mask = (data_arr.real != mask_nodata_value).astype(bool)\n\n    # Apply coherence thresholds if provided\n    if coherence is not None:\n        if coh_low_threshold is not None:\n            coh_mask = (coherence >= coh_low_threshold).astype(bool)\n            mask = mask & coh_mask\n        if coh_high_threshold is not None:\n            coh_mask = (coherence <= coh_high_threshold).astype(bool)\n            mask = mask & coh_mask\n\n    # Apply the mask to the data\n    data_arr = data_arr.where(mask)\n\n    if coherence is None:\n        coherence = np.ones_like(data_arr.real)\n\n    # Unwrap the phase (already in complex form)\n    with suppress_output():\n        unw, _ = snaphu.unwrap(\n            data_arr,\n            coherence,\n            nlooks=nlooks,\n            cost=cost,\n            init=init,\n            mask=mask,\n            **kwargs,\n        )\n\n    # Build xarray DataArray with the unwrapped phase\n    # unw_da = xr.DataArray(unw, coords=data.coords, dims=data.dims)\n    # data = data.to_dataset()\n    data[ouput_var] = ((\"y\", \"x\"), unw)\n\n    # Mask the unwrapped phase\n    # unw_da = unw_da.where(mask)\n    data[ouput_var] = data[ouput_var].where(mask)\n    return data","key":"E59VYb9z3d"},{"type":"output","id":"KydLXubcK1XjwXqU_wnHg","data":[],"key":"LSs7mLJYSK"}],"key":"XUPPEyWOI1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Unwrapping on a Subset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qbFqhIK5Q4"}],"identifier":"unwrapping-on-a-subset","label":"Unwrapping on a Subset","html_id":"unwrapping-on-a-subset","implicit":true,"key":"OFl8FwL4Vp"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As the original image is too large to unwrap in a reasonable time, we will unwrap a subset of the image. In this case, we will unwrap an area of 500x500 pixels.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VcqdaYLVyE"}],"key":"So3JDf4AUW"}],"key":"lR2E3EK3s6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Select a subset of the data\ndx, dy = 500, 500\nx0, y0 = 2800, 1700\n\n\ndef subsetting(ds, x0: int = 0, y0: int = 0, dx: int = 500, dy: int = 500):\n    return ds.isel(x=slice(x0, x0 + dx), y=slice(y0, y0 + dy))\n\n\n# Subsetting the data arrays\nsubset = subsetting(ds.where(mask), x0, y0, dx, dy)\n\n# Unwrap the subset\nsubset = unwrap_array(subset, complex_var=\"cmplx\", ouput_var=\"unwrapped\")","key":"xb9nL6E9CB"},{"type":"output","id":"wq-ZBOI8_jdGhgAtkpc1-","data":[],"key":"KRC5W0TeNh"}],"key":"CshI23O0lE"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s compare the wrapped and unwrapped phase images.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kHv8PFrGlo"}],"key":"ZV9UDDLD9G"}],"key":"MG5tKKPzGw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig, axs = plt.subplots(1, 3, figsize=(14, 4))\n\n# Wrapped Phase\n\n(\n    subset.phase.plot.imshow(cmap=cmap_cyc, ax=axs[0]).axes.set_title(\n        \"Wrapped Phase of the Subset\"\n    )\n)\n\n# Unwrapped Phase\n(\n    subset.unwrapped.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase of the Subset\")\n)\n\n# Subset inside the complete image\n(\n    ds.phase.where(mask)\n    .plot.imshow(cmap=cmap_cyc, zorder=1, ax=axs[2])\n    .axes.set_title(\"Complete Wrapped Phase Image\")\n)\n\nx_start = ds.phase.coords[\"x\"][x0].item()\ny_start = ds.phase.coords[\"y\"][y0].item()\nx_end = ds.phase.coords[\"x\"][x0 + dx].item()\ny_end = ds.phase.coords[\"y\"][y0 + dy].item()\n\nrect = patches.Rectangle(\n    (x_start, y_start),\n    x_end - x_start,\n    y_end - y_start,\n    linewidth=1,\n    edgecolor=\"r\",\n    facecolor=\"red\",\n    alpha=0.5,\n    label=\"Subset\",\n)\n\n# Add the rectangle to the plot\naxs[2].add_patch(rect)\naxs[2].legend()\nplt.tight_layout()","key":"I4rpZ5dWMk"},{"type":"output","id":"34n0ZRQeZTVa9nCLUXH40","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1400x400 with 6 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ce0890ca44edfe7f536d0b1a3c41ac09","path":"/eo-datascience-cookbook/build/ce0890ca44edfe7f536d0b1a3c41ac09.png"}}}],"key":"V9pMzYwbG7"}],"key":"ntvE6TBxvB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Unwrapping with coherence mask","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N68BVhYChg"}],"identifier":"unwrapping-with-coherence-mask","label":"Unwrapping with coherence mask","html_id":"unwrapping-with-coherence-mask","implicit":true,"key":"n7AXnFSwqx"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Additionally, can we try to calculate the unwrapped image, where we are excluding pixels, where the coherence values are lower than a certain threshold. This is done by masking the coherence image with the threshold value and then unwrapping the phase image with the masked coherence image.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mqJAndmuBq"}],"key":"MJiLDAfZER"}],"key":"Ie4yfvaT4I"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"threshold1 = 0.3\nsubset = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold1,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh\",\n)","key":"JQVPSLMt60"},{"type":"output","id":"oexlsxskwYaI65imjvoNJ","data":[],"key":"RxYAO9nXh9"}],"key":"xpFTWOGADE"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s compare the unwrapped image with and without the coherence mask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H895SMHAKN"}],"key":"ZQZhc0BsWW"}],"key":"Jyego2v02N"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig, axs = plt.subplots(1, 2, figsize=(13, 5))\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=axs[0], vmin=-80, vmax=80\n    ).axes.set_title(f\"Unwrapped Phase with Coherence Threshold {threshold1}\")\n)\n\n(\n    subset.unwrapped.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase without Coherence Threshold\")\n)\n\nplt.show()","key":"ZijcFYgAUD"},{"type":"output","id":"LA3ew5zU3AL4oPrfkfPOE","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1300x500 with 4 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c0c03d326804ae907bddebb4a0ad4384","path":"/eo-datascience-cookbook/build/c0c03d326804ae907bddebb4a0ad4384.png"}}}],"key":"g1nGwz2xQZ"}],"key":"HAUHqRskPA"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s see if another threshold value for the coherence mask gives better results.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I9LwyGl8QF"}],"key":"CtFWMU1CCj"}],"key":"DKorvuBqCo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"threshold2 = 0.5\nsubset = unwrap_array(\n    subset,\n    coherence=subset.coh,\n    coh_low_threshold=threshold2,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped_coh2\",\n)\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 5))\n(\n    subset.unwrapped_coh2.plot.imshow(\n        cmap=cmap_cyc, ax=axs[0], vmin=-80, vmax=80\n    ).axes.set_title(\"Coherence Threshold 0.5\")\n)\n\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=axs[1], vmin=-80, vmax=80\n    ).axes.set_title(\"Coherence Threshold 0.3\")\n)\nplt.show()","key":"X40G2dmDs4"},{"type":"output","id":"RnDwzI5LrjVd2ddQluYn0","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1300x500 with 4 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"0ced7bbeba390dfc0b49cc5c6cf613ce","path":"/eo-datascience-cookbook/build/0ced7bbeba390dfc0b49cc5c6cf613ce.png"}}}],"key":"XKHzhhCcbm"}],"key":"NWmJ6qTvox"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A higher coherence threshold means that only pixels with a coherence value greater than 0.5 will be used for phase unwrapping. This would result in an unwrapping process that is likely more stable, with reduced noise (invalid phase information in the proximity of the earthquake faults is discarded). However, an excessive coherence threshold might have significant gaps or missing information, especially in areas where motion or surface changes have occurred.\nThe choice of a coherence threshold depends on the balance you want to strike between the accuracy and coverage of the output unwrapped image.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XkWaN3Di1r"}],"key":"aMaXnpfYfb"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Keep in mind that in case of large displacements, such as the Ridgecrest earthquake, phase unwrapping can be problematic and lead to poor results: when the displacement is large, the phase difference becomes wrapped multiple times, leading to phase aliasing. In this case, the phase values become ambiguous, we cannot distinguish between multiple phase wraps, thus leading to incorrect results.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"FIw7KobQ4Y"}],"key":"wMiFuBqxPI"},{"type":"heading","depth":2,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Applying an Equation for the Displacement Map","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"f5fBliAbrN"}],"identifier":"applying-an-equation-for-the-displacement-map","label":"Applying an Equation for the Displacement Map","html_id":"applying-an-equation-for-the-displacement-map","implicit":true,"key":"djCzboalby"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"From the unwrapped phase image (we will use the phase masked with a coherence threshold of 0.3) we can calculate the displacement map using the following equation:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"VyJeBb3rGO"}],"key":"Gxo8v6jRwc"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"inlineMath","value":"\nd = - \\frac{\\lambda}{4 \\cdot \\pi} \\cdot \\Delta \\phi_d","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>=</mo><mo>−</mo><mfrac><mi>λ</mi><mrow><mn>4</mn><mo>⋅</mo><mi>π</mi></mrow></mfrac><mo>⋅</mo><mi mathvariant=\"normal\">Δ</mi><msub><mi>ϕ</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">\nd = - \\frac{\\lambda}{4 \\cdot \\pi} \\cdot \\Delta \\phi_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Δ</span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"D0tsjQqVks"}],"key":"b5tgibAiQc"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"where:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"I6AwolsY19"}],"key":"VXubMRKNp7"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"\\lambda = 0.056","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mo>=</mo><mn>0.056</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda = 0.056</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.056</span></span></span></span>","key":"xZRtpmk04L"},{"type":"text","value":" for Sentinel-1","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"DUUhtfX61Z"}],"key":"TziBdBQndL"}],"key":"sX3FMsazru"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"\\Delta \\phi_d","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><msub><mi>ϕ</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Delta \\phi_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Δ</span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"C1bXKQ7zDw"},{"type":"text","value":" is the unwrapped image","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"MiXPVpH8lM"}],"key":"XvHqZzKxZP"}],"key":"cviHDP4sNG"}],"key":"teClNGHSkT"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"This operation can be very useful for monitoring ground deformation.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"HW1xlDPVki"}],"key":"YvIxVuJuzb"}],"key":"Fvs2a36Q6v"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def displacement(unw, lambda_val: float = 0.056) -> xr.DataArray:\n    \"\"\"Calculates the displacement from the unwrapped phase\n\n    Parameters\n    ----------\n    unw: xarray DataArray with the unwrapped phase\n    unw: xr.DataArray\n    lambda_val: Wavelength of the radar signal\n    lambda_val: float\n\n    Returns\n    -------\n    xarray DataArray with the displacement\n\n    \"\"\"\n    disp = unw * -lambda_val / (4 * np.pi)\n    return disp\n\n\n# Calculate the displacement\ndisp_subset = displacement(subset.unwrapped_coh)","key":"Slga6fDG6Z"},{"type":"output","id":"IQpzHsxQF4721Wh-EMJUQ","data":[],"key":"C1127bopzB"}],"key":"mbqMzkuQZ8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the displacement map\n(\n    disp_subset.plot.imshow(\n        cmap=cmap_disp, cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map of the Subset\")\n)\nplt.show()","key":"DW9MK8y26I"},{"type":"output","id":"OO3U6y8o6v1nsb7orEODM","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2d31c4cad68c2865f5bd7d9388c65589","path":"/eo-datascience-cookbook/build/2d31c4cad68c2865f5bd7d9388c65589.png"}}}],"key":"ORLxqvlgiV"}],"key":"hzhRgTAgYo"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Coarsen Approach","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HmdgFAa9Zi"}],"identifier":"coarsen-approach","label":"Coarsen Approach","html_id":"coarsen-approach","implicit":true,"key":"MKyG6hDb82"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As the whole data is too large and the processing time already exceeds 20 minutes when using an image with 4000x4000 pixels, we can coarsen the image so that we can unwrap and compute the displacement for the whole scene.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sAh6PYKeyD"}],"key":"dXn9RxDaGl"}],"key":"gPyvpNaJ5c"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"kernel_size = 3\nlowres = ds.coarsen(x=kernel_size, y=kernel_size, boundary=\"trim\").median()","key":"w3UyCyX6cX"},{"type":"output","id":"g6hlT7wqPUhqKDcqa_OH_","data":[],"key":"vd7I94HU5s"}],"key":"y8jBMGvM1R"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lowres = unwrap_array(\n    lowres,\n    ntiles=(20, 30),\n    tile_overlap=10,\n    coherence=lowres.coh,\n    coh_low_threshold=0.3,\n    complex_var=\"cmplx\",\n    ouput_var=\"unwrapped\",\n)","key":"guvF2wmSyN"},{"type":"output","id":"QUgdKwGa94nrtZwVDq5l0","data":[],"key":"vwQLl1Jqbi"}],"key":"CbzzdT66B3"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can now plot the unwrapped image of the low resolution image.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CnynjRFuJA"}],"key":"noEsPupts5"}],"key":"DYYv7285L0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the unwrapped phase\n(\n    lowres.unwrapped.plot.imshow(cmap=cmap_cyc).axes.set_title(\n        \"Unwrapped Phase entire scene (coarsened)\"\n    )\n)\nplt.show()","key":"pWett5CpoK"},{"type":"output","id":"Rx-uIUasaFKTqL4zfnHCg","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b4129b2bcd98ccd4af1392c4476a27ba","path":"/eo-datascience-cookbook/build/b4129b2bcd98ccd4af1392c4476a27ba.png"}}}],"key":"IIZTvD3Ukt"}],"key":"u8kjHUwGnm"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also now calculate the displacement map and compare them.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bxeDHPSx5j"}],"key":"pO8gbI5rPF"}],"key":"GvJOtJ4sXq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lowres_disp = displacement(lowres.unwrapped)\n\n# Plot the displacement map\n(\n    lowres_disp.plot.imshow(\n        cmap=cmap_disp, cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map entire scene (coarse resolution)\")\n)\nplt.show()","key":"m5WunRTjsq"},{"type":"output","id":"CIpyGIWgdnlHQt_qYHuVG","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"d626f14a1d338d4cc4abc805577c5091","path":"/eo-datascience-cookbook/build/d626f14a1d338d4cc4abc805577c5091.png"}}}],"key":"FyFm6GudNh"}],"key":"t4KEHC5a7F"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot a summary of the previous plots:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SLjatw5Shx"}],"key":"VxgBrHxqxv"}],"key":"Qg1HhauqDL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Plot summary of previous plots\nfig, axs = plt.subplots(2, 2, figsize=(12, 10))\nax = axs.ravel()\n\n(\n    subset.unwrapped_coh.plot.imshow(\n        cmap=cmap_cyc, ax=ax[0], vmin=-80, vmax=80\n    ).axes.set_title(\"Unwrapped Phase of the subset with Coherence Threshold 0.3\")\n)\n\n(\n    disp_subset.plot.imshow(\n        cmap=cmap_disp, ax=ax[1], cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map of the Subset\")\n)\n\n(\n    lowres.unwrapped.plot.imshow(cmap=cmap_cyc, ax=ax[2]).axes.set_title(\n        \"Unwrapped Phase of the entire scene with Coherence Threshold 0.3 (coarsened)\"\n    )\n)\n\n(\n    lowres_disp.plot.imshow(\n        cmap=cmap_disp, ax=ax[3], cbar_kwargs={\"label\": \"Meters [m]\"}\n    ).axes.set_title(\"Displacement Map entire scene (coarse resolution)\")\n)\n\nplt.tight_layout()","key":"gMJVHUlNhw"},{"type":"output","id":"DhhyHP0iVToiCPr5ZzEe5","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1200x1000 with 8 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7daa8b8944c3d030d1bee2db0d6a445a","path":"/eo-datascience-cookbook/build/7daa8b8944c3d030d1bee2db0d6a445a.png"}}}],"key":"z1Xwfv6Aw7"}],"key":"K0SIMGHgBZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the following animation, we can capture the 3D displacement caused by the Ridgecrest quake by observing the after and before elevation model.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TTOYNOWqSA"}],"key":"KwtOv70YAA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"image","url":"/eo-datascience-cookbook/build/ridgecrest-a939731dcac60323086c9d2ecf729cd2.gif","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X1bzzqYTEA","urlSource":"../images/ridgecrest.gif"},{"type":"text","value":"\n","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H6CbnbbHzf"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Credits: NASA","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KmHnnnrTCJ"}],"key":"A3JSVNysbj"}],"key":"xCshLiN6Xx"}],"key":"OmvMFIEwMP"}],"key":"WJccYB8ej4"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Interferograms","url":"/notebooks/courses/microwave-remote-sensing/unit-03/in-class-exercise-1","group":"Courses"},"next":{"title":"Environmental Remote Sensing","url":"/notebooks/courses/environmental-remote-sensing","group":"Courses"}}},"domain":"http://localhost:3000"}